skinparam defaultFontName Segoe UI
skinparam Style strictuml
skinparam DefaultFontSize 16
skinparam ArrowThickness 2.2
skinparam ArrowColor #gray
skinparam sequenceArrowThickness 2
skinparam roundcorner 5

actor User1
actor User2
actor User6
participant server
participant "Thread Pool\nT1...T5" as threadpool
participant T1
participant T2
participant DB
User1 -> server
activate server
server ->threadpool: get thread
activate threadpool
server <-- threadpool: T1
deactivate threadpool
server -> T1: User1 Request
activate T1
T1 -> DB : db access for User1
activate DB

@enduml

@startuml
participant Client
participant SendingCommand 
participant APController
participant Websocket

== Intital APController instance == 
APController -> Websocket: 

loop every 5s 
    APController -> Websocket: get Websocket state
    Websocket -> APController: return Websocket state 
    alt Websocket is close 
        APController -> Websocket: request open Websocket
    end 
end 

== Client request send command == 
Client -> APController: request send command
APController -> SendingCommand: set requested send command as sending command
activate SendingCommand #FFBBBB
APController -> APController: transfer command to byte array
APController -> Websocket: get socket state 
Websocket -> APController: return socket state 
loop if (SendingCommand != null && SendingCommand.state != RECEIVED)
    alt socket is open 
        APController -> Websocket: send byte array to socket
        APController -> SendingCommand: set Command state is SENT 
    else socket is close 
        APController -> SendingCommand: set Command state is PENDING 
    end

    alt SendingCommand reach time out
        APController -> SendingCommand: reset sending command 
        APController -> Client: send Command is fail
    end 
end  

== Received data from Websocket == 
Websocket -> APController: notify received command 
alt if received command and sending command is same id 
    APController -> SendingCommand: set Command sate is RECEIVED
    deactivate SendingCommand 
    APController -> Client: send Command is success
end 
@enduml


@startuml

skinparam shadowing false
skinparam roundcorner 5
skinparam BackgroundColor #ffffff
skinparam ArrowColor #333333

skinparam default {
    FontColor #333333
    FontName Arial
    FontSize 12
    MonospacedFontName Source Code Pro
}

skinparam Actor {
    BackgroundColor #ffffff
    BorderColor #009dff
}

skinparam Boundary {
    BackgroundColor #ffffff
    BorderColor #009dff
}

skinparam Control {
    BackgroundColor #ffffff
    BorderColor #009dff
}

skinparam Node {
    BackgroundColor #ffffff
    BorderColor #009dff
}

skinparam Interface {
    BackgroundColor #ffffff
    BorderColor #009dff
}

skinparam Usecase {
    BackgroundColor #ffffff
    BorderColor #009dff
}

skinparam Rectangle {
    BackgroundColor #ffffff
    BorderColor #009dff
}

skinparam Note {
    BackgroundColor #333333
    BorderColor #ffffff
    FontColor #ffffff
}

skinparam Package {
    BackgroundColor #ffffff
    BorderColor #009dff
}

skinparam Class {
    BackgroundColor #F2FAFF
    BorderColor #009dff
    ArrowColor #009dff
}

skinparam Queue {
    BackgroundColor #ffffff
    BorderColor #009dff
}

skinparam Database {
    BackgroundColor #ffffff
    BorderColor #009dff
}

skinparam Participant {
    BackgroundColor #009dff
    BorderColor #009dff
    FontColor #ffffff
    FontStyle bold
}

skinparam Sequence {
    LifeLineBorderColor #009dff
}
cloud "Cloud" {
  package "Package" {
    [register]
    frame "frame" {
      [backup]
    }
  }
}

node "Node" {
  database "Database" {
    [store]
  }
  folder "Folder" {
    [File]
  }
}

[register] .. [store] : HTTP
[backup] .. [File] : FTP

@enduml
