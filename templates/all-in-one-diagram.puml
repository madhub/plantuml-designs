
@startuml

!include stylesheet_murning.iuml
' Various PlantUML diagrams
' - for testing and demonstrating themes
' - everything is currently in a single file to allow easy include from github.com. This may change in future.

note as abc #White
{{

Bob ->x Alice
Bob -> Alice
Bob ->> Alice
Bob -\ Alice
Bob \\- Alice
Bob //-- Alice

Bob ->o Alice
Bob o\\-- Alice

Bob <-> Alice
Bob <->o Alice

Bob -[#red]> Alice : hello
Alice -[#0000FF]->Bob : ok

}}
end note
' -- Sequence diagram --
note as sequence #white
= Sequence diagram
{{
autonumber
Bob -> Alice : hello
activate Alice
group save current work
Alice -> Alice : complete current task
note right
this is a note
end note
box backend system
database storage
end box
Alice -> storage : save state
activate Alice
activate storage
ref over storage
  any database will do
end ref
return success
deactivate Alice
end
return yes?
... 30 seconds later ...
Bob -> Alice : can i ask you something?
activate Alice
return no i'm busy

== various arrow heads ==
Bob ->x Alice
Bob -> Alice
Bob ->> Alice
Bob -\ Alice
Bob \\- Alice
Bob //-- Alice

Bob ->o Alice
Bob o\\-- Alice

Bob <-> Alice
Bob <->o Alice
}}
end note

' -- Class diagram --

note as class #white
= Class diagram
{{
class AClass {
  - private_field
  + public_field
  # protected_field
  ~ package_private_field
  - private_method()
  + public_method()
  # protected_method()
  ~ package_private_method()
}

abstract AnAbstractClass
interface AnInterface
enum AnEnum
annotation AnAnnotation

AClass -down-> AnAbstractClass
AClass -down-|> AnInterface
AClass -down-* AnEnum
AClass -down-o AnAnnotation
}}
end note

' -- Object diagram --

note as object #white
= Object diagram
{{
object Object01
object Object02
object Object03
object Object04
object Object05

Object01 <|-- Object02
Object01 *-- Object03
Object01 o-- "4" Object04
Object01 .. Object05 : some labels
}}
end note

' -- Activity diagram --

note as activity #white
= Activity diagram
{{
start

:Step 1;
:Step 2|
if (condition?) then (yes)
  partition "Do concurrently" {
  fork
    :Parallel 1<
  fork again
    :Parallel 2>
  end fork
  }
else (no)
  :foo/
  :bar]
endif
:done}
(A)
detach
(A)
split
 :split1;
split again
 :split2
 on several lines;
split again
 :split3;
split again
 :split4;
stop
end split
:finish;
end
}}
end note

' -- Usecase diagram --

note as usecase #white
= Use Case diagram
{{
actor "Food Critic" as fc
rectangle Restaurant {
  usecase "Eat Food" as UC1
  usecase "Pay for Food" as UC2
  usecase "Drink" as UC3
}
fc --> UC1
fc --> UC2
fc --> UC3
}}
end note

' -- State diagram --

note as state #white
= State diagram
{{
[*] -down-> State1
State1 --> State2 : Succeeded
State1 --> [*] : Aborted
State2 --> State3 : Succeeded
State2 --> [*] : Aborted
state State3 {
  state "Accumlate Enough Data\nLong State Name" as long1
  long1 : some text
  [*] --> long1
  long1 --> long1 : New Data
  long1 --> ProcessData : Enough Data

  state fork_state <<fork>>
  ProcessData --> fork_state
  fork_state --> State4
  fork_state --> State5

  state join_state <<join>>
  State4 --> join_state
  State5 --> join_state
  join_state --> State6
}
State3 --> State3 : Failed
State3 --> [*] : Succeeded / Save Result
State3 --> [*] : Aborted

}}
end note

' -- Component diagram --

note as component #white
= Component diagram
{{
  package "Some Group" {
    HTTP - [First Component]
    [Another Component]
  }

  node "Other Groups" {
    FTP - [Second Component]
    [First Component] --> FTP
  }

  cloud {
    [Example 1]
  }

  database "MySql" {
    folder "This is my folder" {
      [Folder 3]
    }
    frame "Foo" {
      [Frame 4]
    }
  }

  [Another Component] --> [Example 1]
  [Example 1] --> [Folder 3]
  [Folder 3] --> [Frame 4]
}}
end note

' -- Deployment diagram --

note as deployment #white
= Deployment diagram
just showing all the shapes here
note that not all borders can be styled completely

{{
actor actor
agent agent
artifact artifact
boundary boundary
card card
cloud cloud
collections collections
component component
control control
database database
entity entity
file file
folder folder
frame frame
interface  interface
node node
package package
queue queue
stack stack
rectangle rectangle
storage storage
usecase usecase
}}
end note

' -- Network diagram --

note as network #white
= Network diagram
//currently not themeable//

{{
nwdiag {
  // define a larger group
  group {
    color = "yellow"
    web01
    web02
    db01
    db02
  }
  network Sample_front {
    address = "192.168.10.0/24"
    color = "red"

    // define group
    group web {
      web01 [address = ".1", shape = "node"]
      web02 [address = ".2"]
    }
  }
  network Sample_back {
    address = "192.168.20.0/24"
    web01 [address = ".1"]
    web02 [address = ".2"]
    db01 [address = ".101", shape = database ]
    db02 [address = ".102"]

    // define network using defined nodes
    group db {
      db01;
      db02;
    }
  }
}
}}
end note

' Gantt
note as gantt #white
= Gantt diagram
//currently not themeable//

{{
[Prototype design] lasts 15 days
[Test prototype] lasts 10 days
}}
end note

' Timing
note as timing #white
= Timing diagram
//currently not themeable//

{{
clock clk with period 1
binary "enable" as en
binary "R/W" as rw
binary "data Valid" as dv
concise "dataBus" as db
concise "address bus" as addr

@6 as :write_beg
@10 as :write_end

@15 as :read_beg
@19 as :read_end


@0
en is low
db is "0x0"
addr is "0x03f"
rw is low
dv is 0

@:write_beg-3
 en is high
@:write_beg-2
 db is "0xDEADBEEF"
@:write_beg-1
dv is 1
@:write_beg
rw is high


@:write_end
rw is low
dv is low
@:write_end+1
rw is low
db is "0x0"
addr is "0x23"

@12
dv is high
@13 
db is "0xFFFF"

@20
en is low
dv is low
@21 
db is "0x0"

highlight :write_beg to :write_end #Gold:Write
highlight :read_beg to :read_end #lightBlue:Read

db@:write_beg-1 <-> @:write_end : setup time
db@:write_beg-1 -> addr@:write_end+1 : hold

}}
end note
@enduml